// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "github.com/SweetBloody/bmstu_testing/backend/internal/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// TeamRepositoryI is an autogenerated mock type for the TeamRepositoryI type
type TeamRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: team
func (_m *TeamRepositoryI) Create(team *models.Team) (int, error) {
	ret := _m.Called(team)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Team) (int, error)); ok {
		return rf(team)
	}
	if rf, ok := ret.Get(0).(func(*models.Team) int); ok {
		r0 = rf(team)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*models.Team) error); ok {
		r1 = rf(team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TeamRepositoryI) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *TeamRepositoryI) GetAll() ([]*models.Team, error) {
	ret := _m.Called()

	var r0 []*models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Team, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Team); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamById provides a mock function with given fields: id
func (_m *TeamRepositoryI) GetTeamById(id int) (*models.Team, error) {
	ret := _m.Called(id)

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Team, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Team); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newTeam
func (_m *TeamRepositoryI) Update(newTeam *models.Team) error {
	ret := _m.Called(newTeam)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Team) error); ok {
		r0 = rf(newTeam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTeamRepositoryI creates a new instance of TeamRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamRepositoryI {
	mock := &TeamRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
