// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "github.com/SweetBloody/bmstu_testing/backend/internal/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecaseI is an autogenerated mock type for the UserUsecaseI type
type UserUsecaseI struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: login, password
func (_m *UserUsecaseI) Authenticate(login string, password string) (bool, error) {
	ret := _m.Called(login, password)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(login, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(login, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: user
func (_m *UserUsecaseI) Create(user *models.User) (int, error) {
	ret := _m.Called(user)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (int, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) int); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *UserUsecaseI) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserById provides a mock function with given fields: id
func (_m *UserUsecaseI) GetUserById(id int) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByLogin provides a mock function with given fields: login
func (_m *UserUsecaseI) GetUserByLogin(login string) (*models.User, error) {
	ret := _m.Called(login)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(login)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, newUser
func (_m *UserUsecaseI) Update(id int, newUser *models.User) error {
	ret := _m.Called(id, newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *models.User) error); ok {
		r0 = rf(id, newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUsecaseI creates a new instance of UserUsecaseI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecaseI(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecaseI {
	mock := &UserUsecaseI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
