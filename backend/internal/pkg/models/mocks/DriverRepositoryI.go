// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "git.iu7.bmstu.ru/kaa20u554/testing/backend/internal/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// DriverRepositoryI is an autogenerated mock type for the DriverRepositoryI type
type DriverRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: driver
func (_m *DriverRepositoryI) Create(driver *models.Driver) (int, error) {
	ret := _m.Called(driver)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Driver) (int, error)); ok {
		return rf(driver)
	}
	if rf, ok := ret.Get(0).(func(*models.Driver) int); ok {
		r0 = rf(driver)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*models.Driver) error); ok {
		r1 = rf(driver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *DriverRepositoryI) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *DriverRepositoryI) GetAll() ([]*models.Driver, error) {
	ret := _m.Called()

	var r0 []*models.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Driver, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Driver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDriverById provides a mock function with given fields: id
func (_m *DriverRepositoryI) GetDriverById(id int) (*models.Driver, error) {
	ret := _m.Called(id)

	var r0 *models.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Driver, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Driver); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newDriver
func (_m *DriverRepositoryI) Update(newDriver *models.Driver) error {
	ret := _m.Called(newDriver)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Driver) error); ok {
		r0 = rf(newDriver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDriverRepositoryI creates a new instance of DriverRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriverRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *DriverRepositoryI {
	mock := &DriverRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
